From 0391aa0660c32e172c8b0b304494fa07689f7932 Mon Sep 17 00:00:00 2001
From: Fabian Thomas <fabian@fabianthomas.de>
Date: Fri, 16 Jun 2023 10:47:59 +0200
Subject: [PATCH 1/7] fix DRAMsim3 regression

---
 src/mem/DRAMsim3.py                            |  3 +++
 src/python/gem5/components/memory/dramsim_3.py | 12 +++++-------
 2 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/src/mem/DRAMsim3.py b/src/mem/DRAMsim3.py
index 0da9c1067b..bc7192c901 100644
--- a/src/mem/DRAMsim3.py
+++ b/src/mem/DRAMsim3.py
@@ -54,3 +54,6 @@ class DRAMsim3(AbstractMemory):
     filePath = Param.String(
         "ext/dramsim3/DRAMsim3/", "Directory to prepend to file names"
     )
+
+    def controller(self):
+        return self
diff --git a/src/python/gem5/components/memory/dramsim_3.py b/src/python/gem5/components/memory/dramsim_3.py
index b7eba919fc..a30adfefef 100644
--- a/src/python/gem5/components/memory/dramsim_3.py
+++ b/src/python/gem5/components/memory/dramsim_3.py
@@ -27,11 +27,9 @@ def config_ds3(mem_type: str, num_chnls: int) -> Tuple[str, str]:
     # TODO: We need a better solution to this. This hard-coding is not
     # an acceptable solution.
     dramsim_3_dir = os.path.join(
-        os.path.dirname(os.path.abspath(__file__)),
-        os.pardir,
-        os.pardir,
-        os.pardir,
+        ".",
         "ext",
+        "dramsim3",
         "DRAMsim3",
     )
 
@@ -47,11 +45,11 @@ def config_ds3(mem_type: str, num_chnls: int) -> Tuple[str, str]:
             "Please navigate to `ext` and run:\n"
             "git clone git@github.com:umd-memsys/DRAMsim3.git"
         )
-    elif os.path.isdir(dramsim_3_mem_configs):
+    elif not os.path.isdir(dramsim_3_mem_configs):
         raise Exception(
             "The `ext/DRAMsim3/configs` directory cannot be found."
         )
-    elif os.path.isfile(input_file):
+    elif not os.path.isfile(input_file):
         raise Exception(
             "The configuration file '" + input_file + "' cannot " " be found."
         )
@@ -120,7 +118,7 @@ class SingleChannel(AbstractMemorySystem):
 
     @overrides(AbstractMemorySystem)
     def set_memory_range(self, ranges: List[AddrRange]) -> None:
-        if len(ranges != 1) or ranges[0].size != self._size:
+        if len(ranges) != 1 or ranges[0].size() != self._size:
             raise Exception(
                 "Single channel DRAMSim memory controller requires a single "
                 "range which matches the memory's size."
-- 
2.41.0

