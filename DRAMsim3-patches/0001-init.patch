From 94eb3fe76dc2feb0800c0b58ad0bd218ae9e9112 Mon Sep 17 00:00:00 2001
From: Fabian Thomas <fabian@fabianthomas.de>
Date: Mon, 5 Jun 2023 12:41:20 +0200
Subject: [PATCH] init

---
 Makefile                     |  2 +-
 configs/DDR4_8Gb_x8_2400.ini | 56 +++++++++++++++++++++++++++++++-----
 configs/DDR4_8Gb_x8_3200.ini | 13 +++++++--
 src/bankstate.cc             |  1 +
 src/command_queue.cc         |  2 +-
 src/common.h                 |  7 +++--
 src/configuration.cc         | 44 +++++++++++++++++++++++++++-
 src/configuration.h          | 25 ++++++++++++++++
 src/controller.cc            | 33 +++++++++++++++++++--
 src/controller.h             | 14 +++++++--
 src/cpu.h                    |  4 ++-
 src/dram_system.cc           | 38 +++++++++++++-----------
 src/dram_system.h            | 23 +++++++++------
 src/dramsim3.h               | 18 ++++++++----
 src/hmc.cc                   | 15 +++++-----
 src/hmc.h                    |  5 ++--
 src/memory_system.cc         | 25 +++++++++-------
 src/memory_system.h          | 17 +++++++----
 src/refresh.cc               |  9 ++++--
 src/refresh.h                |  4 ++-
 20 files changed, 274 insertions(+), 81 deletions(-)

diff --git a/Makefile b/Makefile
index 130f7b5..3a2bc5f 100644
--- a/Makefile
+++ b/Makefile
@@ -40,4 +40,4 @@ $(LIB_NAME): $(OBJECTS)
 	$(CC) -fPIC -O2 -o $@ -c $<
 
 clean:
-	-rm -f $(EXE_OBJS) $(LIB_NAME) $(EXE_NAME)
\ No newline at end of file
+	-rm -f $(EXE_OBJS) $(LIB_NAME) $(EXE_NAME)
diff --git a/configs/DDR4_8Gb_x8_2400.ini b/configs/DDR4_8Gb_x8_2400.ini
index f55b021..37f6400 100644
--- a/configs/DDR4_8Gb_x8_2400.ini
+++ b/configs/DDR4_8Gb_x8_2400.ini
@@ -1,9 +1,13 @@
 [dram_structure]
 protocol = DDR4
-bankgroups = 4
-banks_per_group = 4
-rows = 65536
-columns = 1024
+                    # 6+7 (cache line + shift bits)
+bankgroups = 4      # 2
+banks_per_group = 4 # 2
+rows = 65536        # 16
+columns = 1024      # 10
+# bankgroups = 1
+# banks_per_group = 1
+# rows = 100000
 device_width = 8
 BL = 8
 
@@ -18,7 +22,9 @@ tRAS = 39
 tRFC = 420
 tRFC2 = 312
 tRFC4 = 192
-tREFI = 9360
+# TODO: why do we need to increase that high?
+# tREFI = 9360
+tREFI = 93600000
 tRPRE = 1
 tWPRE = 1
 tRRD_S = 4
@@ -54,12 +60,48 @@ IDD6x = 30
 channel_size = 16384
 channels = 1
 bus_width = 64
-address_mapping = rochrababgco
+# address_mapping = rochrababgco
+# address_mapping = chrababgroco
+address_mapping = chrabarobgco
 queue_structure = PER_BANK
 refresh_policy = RANK_LEVEL_STAGGERED
 row_buf_policy = OPEN_PAGE
 cmd_queue_size = 8
-trans_queue_size = 32
+# TODO: this is bad but we have no alternative
+trans_queue_size = 32000000000
+
+[rowhammer]
+# Number of hammers so that a the first bit flips start to occur.
+HC_first = 10000.0
+# Number of hammers where no new flips occur anymore.
+HC_last = 150000.0
+
+# Probability that a quadword flips at HC_last
+# this scales linearly with HC
+HC_last_bitflip_rate = 0.005
+
+inc_dist_1 = 1.0
+inc_dist_2 = 0.0
+inc_dist_3 = 0.0
+inc_dist_4 = 0.0
+inc_dist_5 = 0.0
+
+# Probabilities that more than one flip occurs.
+# Need to satisfy p1+p2+p3+p4=1.
+proba_1_bit_flipped = 1.0
+proba_2_bit_flipped = 0.0
+proba_3_bit_flipped = 0.0
+proba_4_bit_flipped = 0.0
+# predefined static flip mask, overwrites probabilities
+# flip_mask = 0x10000
+
+# Probability as reported by Kim et. al
+para_proba = 0.001
+para_enabled = false
+
+# Threshold so that it is just below HC_first
+trr_threshold = 8000
+trr_enabled = false
 
 [other]
 epoch_period = 1204819
diff --git a/configs/DDR4_8Gb_x8_3200.ini b/configs/DDR4_8Gb_x8_3200.ini
index ecce78e..5263cc6 100644
--- a/configs/DDR4_8Gb_x8_3200.ini
+++ b/configs/DDR4_8Gb_x8_3200.ini
@@ -4,6 +4,9 @@ bankgroups = 4
 banks_per_group = 4
 rows = 65536
 columns = 1024
+# bankgroups = 1
+# banks_per_group = 1
+# rows = 100000
 device_width = 8
 BL = 8
 
@@ -54,14 +57,18 @@ IDD6x = 30
 channel_size = 16384
 channels = 1
 bus_width = 64
-address_mapping = rochrababgco
+# address_mapping = rochrababgco
+address_mapping = chrababgroco
+# address_mapping = chrababgcoro
 queue_structure = PER_BANK
 refresh_policy = RANK_LEVEL_STAGGERED
-row_buf_policy = OPEN_PAGE
+row_buf_policy = CLOSE_PAGE
+# row_buf_policy = SIZE
 cmd_queue_size = 8
 trans_queue_size = 32
 
 [other]
 epoch_period = 1587301
 output_level = 1
-
+# like that we get flips on all three rows
+flip_threshold = 3000
diff --git a/src/bankstate.cc b/src/bankstate.cc
index 46aa511..582aaa4 100644
--- a/src/bankstate.cc
+++ b/src/bankstate.cc
@@ -107,6 +107,7 @@ void BankState::UpdateState(const Command& cmd) {
                     state_ = State::CLOSED;
                     open_row_ = -1;
                     row_hit_count_ = 0;
+                    // printf("\n\n\n\n\n\nresetting\n\n\n\n");
                     break;
                 case CommandType::ACTIVATE:
                 case CommandType::REFRESH:
diff --git a/src/command_queue.cc b/src/command_queue.cc
index f121d28..21045d4 100644
--- a/src/command_queue.cc
+++ b/src/command_queue.cc
@@ -115,7 +115,7 @@ bool CommandQueue::WillAcceptCommand(int rank, int bankgroup, int bank) const {
 }
 
 bool CommandQueue::QueueEmpty() const {
-    for (const auto q : queues_) {
+    for (const auto &q : queues_) {
         if (!q.empty()) {
             return false;
         }
diff --git a/src/common.h b/src/common.h
index 2f3f044..e249b53 100644
--- a/src/common.h
+++ b/src/common.h
@@ -110,16 +110,19 @@ struct Transaction {
         : addr(addr),
           added_cycle(0),
           complete_cycle(0),
-          is_write(is_write) {}
+          is_write(is_write),
+          buffhit(-1) {}
     Transaction(const Transaction& tran)
         : addr(tran.addr),
           added_cycle(tran.added_cycle),
           complete_cycle(tran.complete_cycle),
-          is_write(tran.is_write) {}
+          is_write(tran.is_write),
+          buffhit(tran.buffhit) {}
     uint64_t addr;
     uint64_t added_cycle;
     uint64_t complete_cycle;
     bool is_write;
+    int buffhit;
 
     friend std::ostream& operator<<(std::ostream& os, const Transaction& trans);
     friend std::istream& operator>>(std::istream& is, Transaction& trans);
diff --git a/src/configuration.cc b/src/configuration.cc
index 297692d..96438c2 100644
--- a/src/configuration.cc
+++ b/src/configuration.cc
@@ -1,5 +1,6 @@
 #include "configuration.h"
-
+#include <cassert>
+#include <stdio.h>
 #include <vector>
 
 #ifdef THERMAL
@@ -22,6 +23,7 @@ Config::Config(std::string config_file, std::string out_dir)
     CalculateSize();
     SetAddressMapping();
     InitTimingParams();
+    InitRowhammerParams();
     InitPowerParams();
     InitOtherParams();
 #ifdef THERMAL
@@ -30,6 +32,7 @@ Config::Config(std::string config_file, std::string out_dir)
     delete (reader_);
 }
 
+//
 Address Config::AddressMapping(uint64_t hex_addr) const {
     hex_addr >>= shift_bits;
     int channel = (hex_addr >> ch_pos) & ch_mask;
@@ -41,6 +44,17 @@ Address Config::AddressMapping(uint64_t hex_addr) const {
     return Address(channel, rank, bg, ba, ro, co);
 }
 
+uint64_t Config::ReverseAddressMapping(int channel, int rank, int bg, int ba, int ro, int co) const {
+    uint64_t addr = 0;
+    addr |= channel << ch_pos;
+    addr |= rank << ra_pos;
+    addr |= bg << bg_pos;
+    addr |= ba << ba_pos;
+    addr |= ro << ro_pos;
+    addr |= co << co_pos;
+    return addr << shift_bits;
+}
+
 void Config::CalculateSize() {
     // calculate rank and re-calculate channel_size
     devices_per_rank = bus_width / device_width;
@@ -180,6 +194,33 @@ void Config::InitOtherParams() {
     return;
 }
 
+void Config::InitRowhammerParams() {
+    const auto& reader = *reader_;
+    // These values come from table 6 of Revisiting by Kim et. al
+    inc_dist_1 = reader.GetReal("rowhammer", "inc_dist_1", 1.0);   // 0.3/0.3
+    inc_dist_2 = reader.GetReal("rowhammer", "inc_dist_2", 0.0);   // 0.0/0.3
+    inc_dist_3 = reader.GetReal("rowhammer", "inc_dist_3", 0.3);   // 0.1/0.3
+    inc_dist_4 = reader.GetReal("rowhammer", "inc_dist_4", 0.0);   // 0.0/0.3
+    inc_dist_5 = reader.GetReal("rowhammer", "inc_dist_5", 0.1);   // 0.03/0.3
+    hc_first = reader.GetReal("rowhammer", "HC_first", 300.0);
+    hc_last = reader.GetReal("rowhammer", "HC_last", 300.0);
+    hc_last_bitflip_rate = reader.GetReal("rowhammer", "hc_last_bitflip_rate", 1.0/1000);
+    proba_1_bit_flipped = reader.GetReal("rowhammer", "proba_1_bit_flipped", 1.0);
+    proba_2_bit_flipped = reader.GetReal("rowhammer", "proba_2_bit_flipped", 0.0);
+    proba_3_bit_flipped = reader.GetReal("rowhammer", "proba_3_bit_flipped", 0.0);
+    proba_4_bit_flipped = reader.GetReal("rowhammer", "proba_4_bit_flipped", 0.0);
+    if (proba_1_bit_flipped+proba_2_bit_flipped+proba_3_bit_flipped+proba_4_bit_flipped != 1.0) {
+        std::cerr << "probabilities do not sum up to one"  << std::endl;
+        exit(1);
+    }
+    flip_mask = reader.GetReal("rowhammer", "flip_mask", 0);
+    para_proba = reader.GetReal("rowhammer", "para_proba", 0.05);
+    para_enabled = reader.GetBoolean("rowhammer", "para_enabled", false);
+    trr_threshold = reader.GetInteger("rowhammer", "trr_threshold", 200);
+    trr_enabled = reader.GetBoolean("rowhammer", "trr_enabled", false);
+    return;
+}
+
 void Config::InitPowerParams() {
     const auto& reader = *reader_;
     // Power-related parameters
@@ -395,6 +436,7 @@ void Config::SetAddressMapping() {
     ro_pos = field_pos.at("ro");
     co_pos = field_pos.at("co");
 
+    //
     ch_mask = (1 << field_widths.at("ch")) - 1;
     ra_mask = (1 << field_widths.at("ra")) - 1;
     bg_mask = (1 << field_widths.at("bg")) - 1;
diff --git a/src/configuration.h b/src/configuration.h
index 44dae77..fa4970d 100644
--- a/src/configuration.h
+++ b/src/configuration.h
@@ -35,6 +35,11 @@ class Config {
    public:
     Config(std::string config_file, std::string out_dir);
     Address AddressMapping(uint64_t hex_addr) const;
+    uint64_t ReverseAddressMapping(int channel, int rank, int bg, int ba, int ro, int co) const;
+
+    // TODO: fix this hardcoding
+    int row_size = 2*4096;
+
     // DRAM physical structure
     DRAMProtocol protocol;
     int channel_size;
@@ -99,6 +104,25 @@ class Config {
     int tRCDRD;
     int tRCDWR;
 
+    // Rowhammer
+    double inc_dist_1;
+    double inc_dist_2;
+    double inc_dist_3;
+    double inc_dist_4;
+    double inc_dist_5;
+    double hc_first;
+    double hc_last;
+    double hc_last_bitflip_rate;
+    double proba_1_bit_flipped;
+    double proba_2_bit_flipped;
+    double proba_3_bit_flipped;
+    double proba_4_bit_flipped;
+    uint64_t flip_mask;
+    bool para_enabled;
+    double para_proba;
+    bool trr_enabled;
+    int trr_threshold;
+
     // pre calculated power parameters
     double act_energy_inc;
     double pre_energy_inc;
@@ -190,6 +214,7 @@ class Config {
                    int default_val) const;
     void InitDRAMParams();
     void InitOtherParams();
+    void InitRowhammerParams();
     void InitPowerParams();
     void InitSystemParams();
 #ifdef THERMAL
diff --git a/src/controller.cc b/src/controller.cc
index a582dcc..8891220 100644
--- a/src/controller.cc
+++ b/src/controller.cc
@@ -7,17 +7,25 @@ namespace dramsim3 {
 
 #ifdef THERMAL
 Controller::Controller(int channel, const Config &config, const Timing &timing,
-                       ThermalCalculator &thermal_calc)
+                       ThermalCalculator &thermal_calc,
+                       std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                       std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                       std::function<void(int, int, int)> refresh_callback)
 #else
-Controller::Controller(int channel, const Config &config, const Timing &timing)
+Controller::Controller(int channel, const Config &config, const Timing &timing,
+                       std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                       std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                       std::function<void(int, int, int)> refresh_callback)
 #endif  // THERMAL
     : channel_id_(channel),
+      read_callback_(read_callback),
+      write_callback_(write_callback),
       clk_(0),
       config_(config),
       simple_stats_(config_, channel_id_),
       channel_state_(config, timing),
       cmd_queue_(channel_id_, config, channel_state_, simple_stats_),
-      refresh_(config, channel_state_),
+      refresh_(config, channel_state_,refresh_callback),
 #ifdef THERMAL
       thermal_calc_(thermal_calc),
 #endif  // THERMAL
@@ -48,9 +56,23 @@ std::pair<uint64_t, int> Controller::ReturnDoneTrans(uint64_t clk) {
         if (clk >= it->complete_cycle) {
             if (it->is_write) {
                 simple_stats_.Increment("num_writes_done");
+                Address addr = config_.AddressMapping(it->addr);
+                // TODO: Fixing this would need a lot of effort as writes are anyways not used for hammering and the result is mostely good 
+                // we leave that for now
+                // printf("write in controller.cc returndonetrans, address 0x%lx rowhitcount %d, rowopen: %d\n", it->addr, channel_state_.RowHitCount(addr.rank, addr.bankgroup, addr.bank), channel_state_.IsRowOpen(addr.rank, addr.bankgroup, addr.bank));
+                // printf("rank %d bankgroup %d, bank %d, row %d\n", addr.rank, addr.bankgroup, addr.bank, addr.row);
+                fflush(stdout);
+                int buffhit = channel_state_.RowHitCount(addr.rank, addr.bankgroup, addr.bank);
+                write_callback_(it->addr, addr.channel, addr.rank, addr.bankgroup, addr.bank, addr.row, addr.column,buffhit);
             } else {
                 simple_stats_.Increment("num_reads_done");
                 simple_stats_.AddValue("read_latency", clk_ - it->added_cycle);
+                Address addr = config_.AddressMapping(it->addr);
+                // TODO
+                // printf("read experimental in controller.cc returndonetrans, address 0x%lx rowhitcount %d, rowopen: %d\n", it->addr, channel_state_.RowHitCount(addr.rank, addr.bankgroup, addr.bank), channel_state_.IsRowOpen(addr.rank, addr.bankgroup, addr.bank));
+                // printf("rank %d bankgroup %d, bank %d, row %d\n", addr.rank, addr.bankgroup, addr.bank, addr.row);
+                int buffhit = channel_state_.RowHitCount(addr.rank, addr.bankgroup, addr.bank)-1;
+                read_callback_(it->addr, addr.channel, addr.rank, addr.bankgroup, addr.bank, addr.row, addr.column,buffhit);
             }
             auto pair = std::make_pair(it->addr, it->is_write);
             it = return_queue_.erase(it);
@@ -235,6 +257,7 @@ void Controller::IssueCommand(const Command &cmd) {
     thermal_calc_.UpdateCMDPower(channel_id_, cmd, clk_);
 #endif  // THERMAL
     // if read/write, update pending queue and return queue
+    // printf("issuecommand, address 0x%lx, isread %d, iswrite %d, isreadwrite %d\n", cmd.hex_addr, cmd.IsRead(), cmd.IsWrite(), cmd.IsReadWrite());
     if (cmd.IsRead()) {
         auto num_reads = pending_rd_q_.count(cmd.hex_addr);
         if (num_reads == 0) {
@@ -244,6 +267,10 @@ void Controller::IssueCommand(const Command &cmd) {
         // if there are multiple reads pending return them all
         while (num_reads > 0) {
             auto it = pending_rd_q_.find(cmd.hex_addr);
+            // printf("read in issuecommand, address 0x%lx rowhitcount %d, rowopen: %d\n", cmd.hex_addr, channel_state_.RowHitCount(cmd.Rank(), cmd.Bankgroup(), cmd.Bank()), channel_state_.IsRowOpen(cmd.Rank(), cmd.Bankgroup(), cmd.Bank()));
+            // fflush(stdout);
+            // //TODO
+            // it->second.buffhit = channel_state_.RowHitCount(cmd.Rank(), cmd.Bankgroup(), cmd.Bank());
             it->second.complete_cycle = clk_ + config_.read_delay;
             return_queue_.push_back(it->second);
             pending_rd_q_.erase(it);
diff --git a/src/controller.h b/src/controller.h
index 77bd6af..041af77 100644
--- a/src/controller.h
+++ b/src/controller.h
@@ -2,6 +2,7 @@
 #define __CONTROLLER_H
 
 #include <fstream>
+#include <functional>
 #include <map>
 #include <unordered_set>
 #include <vector>
@@ -23,9 +24,15 @@ class Controller {
    public:
 #ifdef THERMAL
     Controller(int channel, const Config &config, const Timing &timing,
-               ThermalCalculator &thermalcalc);
+               ThermalCalculator &thermalcalc,
+               std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+               std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+               std::function<void(int, int, int)> refresh_callback);
 #else
-    Controller(int channel, const Config &config, const Timing &timing);
+    Controller(int channel, const Config &config, const Timing &timing,
+                std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                std::function<void(int, int, int)> refresh_callback);
 #endif  // THERMAL
     void ClockTick();
     bool WillAcceptTransaction(uint64_t hex_addr, bool is_write) const;
@@ -36,8 +43,8 @@ class Controller {
     void PrintFinalStats();
     void ResetStats() { simple_stats_.Reset(); }
     std::pair<uint64_t, int> ReturnDoneTrans(uint64_t clock);
-
     int channel_id_;
+    std::function<void(uint64_t req_id, int channel, int rank, int bankgroup, int bank, int row, int column, int bufferhit)> read_callback_, write_callback_;
 
    private:
     uint64_t clk_;
@@ -46,6 +53,7 @@ class Controller {
     ChannelState channel_state_;
     CommandQueue cmd_queue_;
     Refresh refresh_;
+    std::vector<std::pair<uint64_t, int>> addr_is_hit;
 
 #ifdef THERMAL
     ThermalCalculator &thermal_calc_;
diff --git a/src/cpu.h b/src/cpu.h
index 9ec28e7..c5ef488 100644
--- a/src/cpu.h
+++ b/src/cpu.h
@@ -15,11 +15,13 @@ class CPU {
         : memory_system_(
               config_file, output_dir,
               std::bind(&CPU::ReadCallBack, this, std::placeholders::_1),
-              std::bind(&CPU::WriteCallBack, this, std::placeholders::_1)),
+              std::bind(&CPU::WriteCallBack, this, std::placeholders::_1),
+              std::bind(&CPU::RefreshCallBack, this, std::placeholders::_1)),
           clk_(0) {}
     virtual void ClockTick() = 0;
     void ReadCallBack(uint64_t addr) { return; }
     void WriteCallBack(uint64_t addr) { return; }
+    void RefreshCallBack(uint64_t addr) { return; }
     void PrintStats() { memory_system_.PrintStats(); }
 
    protected:
diff --git a/src/dram_system.cc b/src/dram_system.cc
index 86f35f8..a4eb64f 100644
--- a/src/dram_system.cc
+++ b/src/dram_system.cc
@@ -9,10 +9,12 @@ namespace dramsim3 {
 int BaseDRAMSystem::total_channels_ = 0;
 
 BaseDRAMSystem::BaseDRAMSystem(Config &config, const std::string &output_dir,
-                               std::function<void(uint64_t)> read_callback,
-                               std::function<void(uint64_t)> write_callback)
+                               std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                               std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                               std::function<void(int, int, int)> refresh_callback)
     : read_callback_(read_callback),
       write_callback_(write_callback),
+      refresh_callback_(refresh_callback),
       last_req_clk_(0),
       config_(config),
       timing_(config_),
@@ -86,17 +88,20 @@ void BaseDRAMSystem::ResetStats() {
 }
 
 void BaseDRAMSystem::RegisterCallbacks(
-    std::function<void(uint64_t)> read_callback,
-    std::function<void(uint64_t)> write_callback) {
+    std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+    std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+    std::function<void(int, int, int)> refresh_callback) {
     // TODO this should be propagated to controllers
     read_callback_ = read_callback;
     write_callback_ = write_callback;
+    refresh_callback_ = refresh_callback;
 }
 
 JedecDRAMSystem::JedecDRAMSystem(Config &config, const std::string &output_dir,
-                                 std::function<void(uint64_t)> read_callback,
-                                 std::function<void(uint64_t)> write_callback)
-    : BaseDRAMSystem(config, output_dir, read_callback, write_callback) {
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                                 std::function<void(int, int, int)> refresh_callback)
+    : BaseDRAMSystem(config, output_dir, read_callback, write_callback,refresh_callback) {
     if (config_.IsHMC()) {
         std::cerr << "Initialized a memory system with an HMC config file!"
                   << std::endl;
@@ -106,9 +111,9 @@ JedecDRAMSystem::JedecDRAMSystem(Config &config, const std::string &output_dir,
     ctrls_.reserve(config_.channels);
     for (auto i = 0; i < config_.channels; i++) {
 #ifdef THERMAL
-        ctrls_.push_back(new Controller(i, config_, timing_, thermal_calc_));
+        ctrls_.push_back(new Controller(i, config_, timing_, thermal_calc_,read_callback_,write_callback_,refresh_callback_));
 #else
-        ctrls_.push_back(new Controller(i, config_, timing_));
+        ctrls_.push_back(new Controller(i, config_, timing_,read_callback_,write_callback_,refresh_callback_));
 #endif  // THERMAL
     }
 }
@@ -150,9 +155,9 @@ void JedecDRAMSystem::ClockTick() {
         while (true) {
             auto pair = ctrls_[i]->ReturnDoneTrans(clk_);
             if (pair.second == 1) {
-                write_callback_(pair.first);
+                ;
             } else if (pair.second == 0) {
-                read_callback_(pair.first);
+                ;
             } else {
                 break;
             }
@@ -170,9 +175,10 @@ void JedecDRAMSystem::ClockTick() {
 }
 
 IdealDRAMSystem::IdealDRAMSystem(Config &config, const std::string &output_dir,
-                                 std::function<void(uint64_t)> read_callback,
-                                 std::function<void(uint64_t)> write_callback)
-    : BaseDRAMSystem(config, output_dir, read_callback, write_callback),
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                                 std::function<void(int, int, int)> refresh_callback)
+    : BaseDRAMSystem(config, output_dir, read_callback, write_callback,refresh_callback),
       latency_(config_.ideal_memory_latency) {}
 
 IdealDRAMSystem::~IdealDRAMSystem() {}
@@ -189,9 +195,9 @@ void IdealDRAMSystem::ClockTick() {
          trans_it != infinite_buffer_q_.end();) {
         if (clk_ - trans_it->added_cycle >= static_cast<uint64_t>(latency_)) {
             if (trans_it->is_write) {
-                write_callback_(trans_it->addr);
+                ;
             } else {
-                read_callback_(trans_it->addr);
+                ;
             }
             trans_it = infinite_buffer_q_.erase(trans_it++);
         }
diff --git a/src/dram_system.h b/src/dram_system.h
index 7864b2c..e127c2a 100644
--- a/src/dram_system.h
+++ b/src/dram_system.h
@@ -19,11 +19,13 @@ namespace dramsim3 {
 class BaseDRAMSystem {
    public:
     BaseDRAMSystem(Config &config, const std::string &output_dir,
-                   std::function<void(uint64_t)> read_callback,
-                   std::function<void(uint64_t)> write_callback);
+                   std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                   std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                   std::function<void(int, int, int)> refresh_callback);
     virtual ~BaseDRAMSystem() {}
-    void RegisterCallbacks(std::function<void(uint64_t)> read_callback,
-                           std::function<void(uint64_t)> write_callback);
+    void RegisterCallbacks(std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                           std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                           std::function<void(int, int, int)> refresh_callback);
     void PrintEpochStats();
     void PrintStats();
     void ResetStats();
@@ -34,7 +36,8 @@ class BaseDRAMSystem {
     virtual void ClockTick() = 0;
     int GetChannel(uint64_t hex_addr) const;
 
-    std::function<void(uint64_t req_id)> read_callback_, write_callback_;
+    std::function<void(uint64_t req_id, int channel, int rank, int bankgroup, int bank, int row, int column, int bufferhit)> read_callback_, write_callback_;
+    std::function<void(int channel, int bankgroup, int bank)> refresh_callback_;
     static int total_channels_;
 
    protected:
@@ -61,8 +64,9 @@ class BaseDRAMSystem {
 class JedecDRAMSystem : public BaseDRAMSystem {
    public:
     JedecDRAMSystem(Config &config, const std::string &output_dir,
-                    std::function<void(uint64_t)> read_callback,
-                    std::function<void(uint64_t)> write_callback);
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                    std::function<void(int, int, int)> refresh_callback);
     ~JedecDRAMSystem();
     bool WillAcceptTransaction(uint64_t hex_addr, bool is_write) const override;
     bool AddTransaction(uint64_t hex_addr, bool is_write) override;
@@ -75,8 +79,9 @@ class JedecDRAMSystem : public BaseDRAMSystem {
 class IdealDRAMSystem : public BaseDRAMSystem {
    public:
     IdealDRAMSystem(Config &config, const std::string &output_dir,
-                    std::function<void(uint64_t)> read_callback,
-                    std::function<void(uint64_t)> write_callback);
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                    std::function<void(int, int, int)> refresh_callback);
     ~IdealDRAMSystem();
     bool WillAcceptTransaction(uint64_t hex_addr,
                                bool is_write) const override {
diff --git a/src/dramsim3.h b/src/dramsim3.h
index 31a3c8a..ca4808d 100644
--- a/src/dramsim3.h
+++ b/src/dramsim3.h
@@ -1,6 +1,7 @@
 #ifndef __MEMORY_SYSTEM__H
 #define __MEMORY_SYSTEM__H
 
+#include "configuration.h"
 #include <functional>
 #include <string>
 
@@ -10,12 +11,14 @@ namespace dramsim3 {
 class MemorySystem {
    public:
     MemorySystem(const std::string &config_file, const std::string &output_dir,
-                 std::function<void(uint64_t)> read_callback,
-                 std::function<void(uint64_t)> write_callback);
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                 std::function<void(int, int, int)> refresh_callback);
     ~MemorySystem();
     void ClockTick();
-    void RegisterCallbacks(std::function<void(uint64_t)> read_callback,
-                           std::function<void(uint64_t)> write_callback);
+    void RegisterCallbacks(std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                           std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                           std::function<void(int,int,int)> refresh_callback);
     double GetTCK() const;
     int GetBusBits() const;
     int GetBurstLength() const;
@@ -23,13 +26,16 @@ class MemorySystem {
     void PrintStats() const;
     void ResetStats();
 
+    Config* GetConfig();
+
     bool WillAcceptTransaction(uint64_t hex_addr, bool is_write) const;
     bool AddTransaction(uint64_t hex_addr, bool is_write);
 };
 
 MemorySystem* GetMemorySystem(const std::string &config_file, const std::string &output_dir,
-                 std::function<void(uint64_t)> read_callback,
-                 std::function<void(uint64_t)> write_callback);
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                 std::function<void(int,int,int)> refresh_callback);
 }  // namespace dramsim3
 
 #endif
diff --git a/src/hmc.cc b/src/hmc.cc
index 5f5c23b..21dcb5d 100644
--- a/src/hmc.cc
+++ b/src/hmc.cc
@@ -241,9 +241,10 @@ HMCResponse::HMCResponse(uint64_t id, HMCReqType req_type, int dest_link,
 }
 
 HMCMemorySystem::HMCMemorySystem(Config &config, const std::string &output_dir,
-                                 std::function<void(uint64_t)> read_callback,
-                                 std::function<void(uint64_t)> write_callback)
-    : BaseDRAMSystem(config, output_dir, read_callback, write_callback),
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                                 std::function<void(int, int, int)> refresh_callback)
+    : BaseDRAMSystem(config, output_dir, read_callback, write_callback,refresh_callback),
       logic_clk_(0),
       logic_ps_(0),
       dram_ps_(0),
@@ -261,9 +262,9 @@ HMCMemorySystem::HMCMemorySystem(Config &config, const std::string &output_dir,
     ctrls_.reserve(config_.channels);
     for (int i = 0; i < config_.channels; i++) {
 #ifdef THERMAL
-        ctrls_.push_back(new Controller(i, config_, timing_, thermal_calc_));
+        ctrls_.push_back(new Controller(i, config_, timing_, thermal_calc_, read_callback_, write_callback_,refresh_callback_));
 #else
-        ctrls_.push_back(new Controller(i, config_, timing_));
+        ctrls_.push_back(new Controller(i, config_, timing_,read_callback_,write_callback_,refresh_callback_));
 #endif  // THERMAL
     }
     // initialize vaults and crossbar
@@ -498,9 +499,9 @@ void HMCMemorySystem::DrainResponses() {
             HMCResponse *resp = link_resp_queues_[i].front();
             if (resp->exit_time <= logic_clk_) {
                 if (resp->type == HMCRespType::RD_RS) {
-                    read_callback_(resp->resp_id);
+                    ;
                 } else {
-                    write_callback_(resp->resp_id);
+                    ;
                 }
                 delete (resp);
                 link_resp_queues_[i].erase(link_resp_queues_[i].begin());
diff --git a/src/hmc.h b/src/hmc.h
index f9900c6..f64d2c7 100644
--- a/src/hmc.h
+++ b/src/hmc.h
@@ -105,8 +105,9 @@ class HMCResponse {
 class HMCMemorySystem : public BaseDRAMSystem {
    public:
     HMCMemorySystem(Config& config, const std::string& output_dir,
-                    std::function<void(uint64_t)> read_callback,
-                    std::function<void(uint64_t)> write_callback);
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                    std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                    std::function<void(int, int, int)> refresh_callback);
     ~HMCMemorySystem();
     // assuming there are 2 clock domains one for logic die one for DRAM
     // we can unify them as one but then we'll have to convert all the
diff --git a/src/memory_system.cc b/src/memory_system.cc
index 739ea1a..5445420 100644
--- a/src/memory_system.cc
+++ b/src/memory_system.cc
@@ -3,16 +3,17 @@
 namespace dramsim3 {
 MemorySystem::MemorySystem(const std::string &config_file,
                            const std::string &output_dir,
-                           std::function<void(uint64_t)> read_callback,
-                           std::function<void(uint64_t)> write_callback)
+                           std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                           std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                           std::function<void(int, int, int)> refresh_callback)
     : config_(new Config(config_file, output_dir)) {
     // TODO: ideal memory type?
     if (config_->IsHMC()) {
         dram_system_ = new HMCMemorySystem(*config_, output_dir, read_callback,
-                                           write_callback);
+                                           write_callback,refresh_callback);
     } else {
         dram_system_ = new JedecDRAMSystem(*config_, output_dir, read_callback,
-                                           write_callback);
+                                           write_callback,refresh_callback);
     }
 }
 
@@ -21,6 +22,8 @@ MemorySystem::~MemorySystem() {
     delete (config_);
 }
 
+Config* MemorySystem::GetConfig(){return config_;};
+
 void MemorySystem::ClockTick() { dram_system_->ClockTick(); }
 
 double MemorySystem::GetTCK() const { return config_->tCK; }
@@ -32,9 +35,10 @@ int MemorySystem::GetBurstLength() const { return config_->BL; }
 int MemorySystem::GetQueueSize() const { return config_->trans_queue_size; }
 
 void MemorySystem::RegisterCallbacks(
-    std::function<void(uint64_t)> read_callback,
-    std::function<void(uint64_t)> write_callback) {
-    dram_system_->RegisterCallbacks(read_callback, write_callback);
+    std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+    std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+    std::function<void(int, int, int)> refresh_callback) {
+    dram_system_->RegisterCallbacks(read_callback, write_callback,refresh_callback);
 }
 
 bool MemorySystem::WillAcceptTransaction(uint64_t hex_addr,
@@ -51,9 +55,10 @@ void MemorySystem::PrintStats() const { dram_system_->PrintStats(); }
 void MemorySystem::ResetStats() { dram_system_->ResetStats(); }
 
 MemorySystem* GetMemorySystem(const std::string &config_file, const std::string &output_dir,
-                 std::function<void(uint64_t)> read_callback,
-                 std::function<void(uint64_t)> write_callback) {
-    return new MemorySystem(config_file, output_dir, read_callback, write_callback);
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                 std::function<void(int, int, int)> refresh_callback) {
+    return new MemorySystem(config_file, output_dir, read_callback, write_callback, refresh_callback);
 }
 }  // namespace dramsim3
 
diff --git a/src/memory_system.h b/src/memory_system.h
index 57eeca1..e09c815 100644
--- a/src/memory_system.h
+++ b/src/memory_system.h
@@ -14,12 +14,14 @@ namespace dramsim3 {
 class MemorySystem {
    public:
     MemorySystem(const std::string &config_file, const std::string &output_dir,
-                 std::function<void(uint64_t)> read_callback,
-                 std::function<void(uint64_t)> write_callback);
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                 std::function<void(int, int, int)> refresh_callback);
     ~MemorySystem();
     void ClockTick();
-    void RegisterCallbacks(std::function<void(uint64_t)> read_callback,
-                           std::function<void(uint64_t)> write_callback);
+    void RegisterCallbacks(std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                           std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                           std::function<void(int, int, int)> refresh_callback);
     double GetTCK() const;
     int GetBusBits() const;
     int GetBurstLength() const;
@@ -27,6 +29,8 @@ class MemorySystem {
     void PrintStats() const;
     void ResetStats();
 
+    Config* GetConfig();
+
     bool WillAcceptTransaction(uint64_t hex_addr, bool is_write) const;
     bool AddTransaction(uint64_t hex_addr, bool is_write);
 
@@ -39,8 +43,9 @@ class MemorySystem {
 };
 
 MemorySystem* GetMemorySystem(const std::string &config_file, const std::string &output_dir,
-                 std::function<void(uint64_t)> read_callback,
-                 std::function<void(uint64_t)> write_callback);
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> read_callback,
+                 std::function<void(uint64_t, int, int, int, int, int, int, int)> write_callback,
+                 std::function<void(int, int, int)> refresh_callback);
 
 }  // namespace dramsim3
 
diff --git a/src/refresh.cc b/src/refresh.cc
index 31cbc9f..2e8ba94 100644
--- a/src/refresh.cc
+++ b/src/refresh.cc
@@ -1,8 +1,10 @@
 #include "refresh.h"
 
 namespace dramsim3 {
-Refresh::Refresh(const Config &config, ChannelState &channel_state)
-    : clk_(0),
+Refresh::Refresh(const Config &config, ChannelState &channel_state,
+                 std::function<void(int, int, int)> refresh_callback)
+    : refresh_callback_(refresh_callback),
+      clk_(0),
       config_(config),
       channel_state_(channel_state),
       refresh_policy_(config.refresh_policy),
@@ -32,6 +34,7 @@ void Refresh::InsertRefresh() {
         case RefreshPolicy::RANK_LEVEL_SIMULTANEOUS:
             for (auto i = 0; i < config_.ranks; i++) {
                 if (!channel_state_.IsRankSelfRefreshing(i)) {
+                    refresh_callback_(i,-1,-1);
                     channel_state_.RankNeedRefresh(i, true);
                     break;
                 }
@@ -40,6 +43,7 @@ void Refresh::InsertRefresh() {
         // Staggered all rank refresh
         case RefreshPolicy::RANK_LEVEL_STAGGERED:
             if (!channel_state_.IsRankSelfRefreshing(next_rank_)) {
+                refresh_callback_(next_rank_,-1,-1);
                 channel_state_.RankNeedRefresh(next_rank_, true);
             }
             IterateNext();
@@ -47,6 +51,7 @@ void Refresh::InsertRefresh() {
         // Fully staggered per bank refresh
         case RefreshPolicy::BANK_LEVEL_STAGGERED:
             if (!channel_state_.IsRankSelfRefreshing(next_rank_)) {
+                refresh_callback_(next_rank_,next_bg_,next_bank_);
                 channel_state_.BankNeedRefresh(next_rank_, next_bg_, next_bank_,
                                                true);
             }
diff --git a/src/refresh.h b/src/refresh.h
index 257c941..bdad9fa 100644
--- a/src/refresh.h
+++ b/src/refresh.h
@@ -2,6 +2,7 @@
 #define __REFRESH_H
 
 #include <vector>
+#include <functional>
 #include "channel_state.h"
 #include "common.h"
 #include "configuration.h"
@@ -10,8 +11,9 @@ namespace dramsim3 {
 
 class Refresh {
    public:
-    Refresh(const Config& config, ChannelState& channel_state);
+    Refresh(const Config& config, ChannelState& channel_state,std::function<void(int,int,int)> refresh_callback);
     void ClockTick();
+    std::function<void(int,int,int)> refresh_callback_;
 
    private:
     uint64_t clk_;
-- 
2.40.1

